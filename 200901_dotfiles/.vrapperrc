
"" =================
"" Jan Meppe .vimrc 
"" =================
" Remap mapleader
let mapleader = ","

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
syntax on
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$


" Remap <Leader>a to align environment
" 10/2/2015 20:55 very strange all select bug leader a .... "
map <Leader>a <f5>8<CR>kj<C-l>i<Tab>

" Remap <C-T> write and compile tex
map <C-t> :w<CR><leader>ll

" Remap <Leader>v to edit .vimrc
" Changed to vsp recently 
map <Leader>v :vsp $MYVIMRC<CR><C-W>

" Remap kj to escape 
:imap kj <Esc>

" Set colorscheme to molokai
colorscheme molokai

"" Pathogen
execute pathogen#infect()

" Remap spacebar for folding
nnoremap <space> za
vnoremap <space> zf

" Save folds when exiting file USE AUGROUP
" TO PREVENT SLOW LOADING! 
augroup Group1
    autocmd BufWinLeave *.* mkview
    autocmd BufWinEnter *.* silent loadview 
    "" Automatically reload .vimrc when saved
augroup END



"" Real programmers don't use TABS they use SPACES
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

"" Disable stupid backup and swap files
set nobackup
set nowritebackup
set noswapfile

"" Reselect selection after indenting: shift + > < for indenting
vnoremap < <gv
vnoremap > >gv


"" Quicksave
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C_C>:update<CR>
inoremap <C-Z> <C-O>:update<CR>
noremap <Leader>z :update<CR>
"test 
"" Quickquit
noremap <Leader>e :quit<CR> 
noremap <Leader>E :qa!<CR>

"" Enable cursorline <Leader>c to toggle highlighting
":hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred
":hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred
:nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>

"" Remap cntrl + n to open Nerdtree
map <C-n> :NERDTreeToggle<CR>

"" Show different background for col >80 
let &colorcolumn=join(range(81,999),",")

" Map <C-L> (redraw screen) to also turn off search highlighting until the
nnoremap <Leader><C-L> :nohl<CR><C-L>

"" Set grep to always generate file name (?)
""set grepprg=grep\ -nH\ $*

"" =================
"" Vundle settings
"" =================

"" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" git repos on your local machine (i.e. when working on your own plugin)
Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" see :h vundle for more details or wiki for FAQ

"" Random stuff


" =================
" Auto complete parentheses
" =================

inoremap ( ()<Esc>:call BC_AddChar(")")<CR>i
inoremap % %%<Esc>:call BC_AddChar("%")<CR>i
"inoremap < <><Esc>:call BC_AddChar(">")<CR>i
inoremap { {}<Esc>:call BC_AddChar("}")<CR>i
inoremap [ []<Esc>:call BC_AddChar("]")<CR>i
inoremap $ $$<Esc>:call BC_AddChar("$")<CR>i

inoremap <C-j> <Esc>:call search(BC_GetChar(),"W")<CR>a

function! BC_AddChar(schar)
 if exists("b:robstack")
  let b:robstack = b:robstack . a:schar
   else
    let b:robstack = a:schar
     endif
     endfunction

     function! BC_GetChar()
      let l:char = b:robstack[strlen(b:robstack)-1]
       let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
        return l:char
        endfunction



""autocmd bufwritepost .vimrc source $MYVIMRC "auto source vimrc
au BufWritePost .vimrc so ~/.vimrc

"" Easier split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"" split below and right instead of left top
set splitbelow
set splitright

"" Autocomplete
"imap <Tab> <C-P>
